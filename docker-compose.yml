services:
  # API Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vocaliq-api
    env_file: .env
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://vocaliq:vocaliq@postgres:5432/vocaliq
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=scJrpRT3lwmG9rgAdnusnrJ!y1lRcg!O5SlBk1SuG7!GgI$8d6kDRbe8C4URQa^U
      - JWT_SECRET_KEY=olCh8rq3K2lWhUXib0piWooLkJxl6oi7bNBq816CT1U=
      - ADMIN_PASSWORD=sz9BdPui*eqhfmk1
      - ENCRYPTION_KEY=yp0I0MHV7A95oUsLZqJdTtB6q3gmB0Ms8NbCMu9kB3Y=
      - WEAVIATE_URL=http://weaviate:8080
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - API_BASE_URL=http://localhost:8001
      - FRONTEND_URL=http://localhost:5173
    volumes:
      - ./backend:/app
      - ./backend/alembic:/app/alembic
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn api.main:app --reload --host 0.0.0.0 --port 8000

  # Frontend Dashboard
  frontend:
    build:
      context: ./backend/frontend
      dockerfile: Dockerfile.dev
    container_name: vocaliq-frontend
    environment:
      - VITE_API_URL=http://api:8000
    volumes:
      - ./backend/frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    depends_on:
      - api

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vocaliq-postgres
    environment:
      - POSTGRES_DB=vocaliq
      - POSTGRES_USER=vocaliq
      - POSTGRES_PASSWORD=vocaliq
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vocaliq"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vocaliq-redis
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:latest
    container_name: vocaliq-weaviate
    env_file: .env
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=text2vec-openai
      - ENABLE_MODULES=text2vec-openai
      - OPENAI_APIKEY=${OPENAI_API_KEY}
    volumes:
      - weaviate_data:/var/lib/weaviate
    ports:
      - "8081:8080"

  # Nginx (optional, for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: vocaliq-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - frontend
    profiles:
      - production

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: vocaliq-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    profiles:
      - monitoring

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: vocaliq-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  weaviate_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    name: vocaliq-network